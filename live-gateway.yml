spring:
  application:
     name: live-gateway  # Service registers under this name
  freemarker:
    enabled: false           # Ignore Eureka dashboard FreeMarker templates

# HTTP Server
server:
  port: 8080   # HTTP (Tomcat) port
  servlet:
    contextPath: /live

ribbon:
  ReadTimeout: 60000
  ConnectTimeout: 60000

zuul:
  routes:
    live-users:
      path: /users/**
      serviceId: live-users
      stripPrefix: false
      sensitive-headers:
    live-auth:
      path: /auth/**
      serviceId: live-auth
      stripPrefix: false
      sensitive-headers:
    live-profiles:
      path: /host/*/profile/**
      stripPrefix: false
      serviceId: live-profiles
      sensitive-headers:
    live-venues:
      path: /host/*/venues/**
      stripPrefix: false
      sensitive-headers:
      cqrs: true
      services:
        - serviceId: live-venues-query
          methods:
            - GET
        - serviceId: live-venues-command
          methods:
            - POST
            - PUT

  ribbon:
    eager-load:
      enabled: true
  debug:
    request: true
  host:
    connect-timeout-millis: 60000 # starting the connection
    socket-timeout-millis: 60000

hystrix:
  command:
    default:
      execution:
        isolation:
          strategy: THREAD
          thread:
            timeoutInMilliseconds: 90000

# The OAuth2 server definition that would be used to send the authorization requests to
authserver:
  hostname: localhost
  port: 9991
  contextPath: auth

gatewayserver:
  hostname: localhost
  port: 8080
  contextPath: live

security:
  user:
    password: none
  oauth2:
    client:
      accessTokenUri: http://${authserver.hostname}:${authserver.port}/${authserver.contextPath}/oauth/token
      userAuthorizationUri: http://${authserver.hostname}:${authserver.port}/${authserver.contextPath}/oauth/authorize
      clientId: livesound-app
      clientSecret: secret
      registered-redirect-uri: http://${gatewayserver.hostname}:${gatewayserver.port}/${gatewayserver.contextPath}/login
      pre-established-redirect-uri: http://${gatewayserver.hostname}:${gatewayserver.port}/${gatewayserver.contextPath}/login
      useCurrentUri: false

    resource:
      jwt:
        keyValue: |
          -----BEGIN PUBLIC KEY-----
          MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAgF6F67H/yxFkUdDbqdD9
          FuCR3ikaUgDRB9f0o9usZeVljTW2jZsXHcsPh56MRUZ21BNDu6iCwvg/CsnAVbme
          WNQ4xoQDeyLJi4rxt++gKqM3PxeOGx9O+vw75Bo4Sy8ZZ4SS3Vr7zGGPLYZZYinG
          Kg0LMF1UwxebcgOKyFw29ZArfU6hziiow9YltmqufPL+oem1YXxaOZvMB4gT1gg/
          XkRp/+CyQF1PpPknvDWmlUr6FDGcbvQJyaH2EY12+G0teTn/lqFa5hhWYVRSiNHP
          FBH47XkCtd/8sQTEUTnc4guwW096j0SUBE2+PUWdoFZyoMgvVNfmzgWNm087CNwW
          nwIDAQAB
          -----END PUBLIC KEY-----

logging:
  level:
    ROOT: INFO
    org.springframework.web: INFO
    org.springframework.security: DEBUG

eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:1111/eureka/

# Actuator
management:
  endpoints:
    enabled-by-default: true
    web:
      exposure:
        include: "*"
---

spring:
  profiles: docker

authserver:
  hostname: live-auth

eureka:
  client:
    serviceUrl:
      defaultZone: http://live-discovery:1111/eureka/
  instance:
  # Register our microservices to Eureka using hostnames in a Docker environment will not work, they will all get
  # one and the same hostname. Instead we configure them to use its IP address during registration with Eureka.
    preferIpAddress: true
    leaseRenewalIntervalInSeconds: 5   # DO NOT DO THIS IN PRODUCTION
